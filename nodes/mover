#!/usr/bin/env python
import rospy
import signal
import sys
import math
import tf
import PyKDL
import copy

from geometry_msgs.msg import Twist, Pose, PoseStamped
from std_msgs.msg import String

import numpy as np 


class Mover(object):
    def __init__(self):
        self._tl = tf.TransformListener()
        self._br = tf.TransformBroadcaster()

        self._sim = True
        vel_top = "/mover/cart_vel"
        if not self._sim:
            vel_top = "/panda/cart_vel"
        self._panda_vel_pub = rospy.Publisher(vel_top,Twist,queue_size=5)
        self._com_sub = rospy.Subscriber("/command", String, self.on_command)
        self._command_pub = rospy.Publisher("/panda/commands", String, queue_size=1)
        self._goal_pub = rospy.Publisher("/panda/goal", PoseStamped, queue_size=1)

        rospy.sleep(1.) # sleep a bit to make sure the TF cache is filled

        self._freq = 200.
        self.goal = None
        self._gripper_open = True

 
    def run(self):
        r = rospy.Rate(self._freq)
        while not rospy.is_shutdown():
            self.move()
            r.sleep()
    
    def on_command(self,msg):
        print(msg.data)
        if msg.data == "gripper":
            cmd = String()
            if self._gripper_open:
                cmd.data = "grasp"
                self._gripper_open = False
            else:
                cmd.data = "release"
                self._gripper_open = True
            
            self._command_pub.publish(cmd)


    def move(self):
        try:
            (trans,rot) = self._tl.lookupTransform("panda", "cube", rospy.Time(0))
        except:
            print("No unity transform")
            return
        #self._br.sendTransform(trans,rot,rospy.Time.now(),"goal","panda_link0")

        goal = PoseStamped()
        goal.pose.position.x=trans[0]
        goal.pose.position.y=trans[1]
        goal.pose.position.z=trans[2]
        goal.pose.orientation.x=rot[0]
        goal.pose.orientation.y=rot[1]
        goal.pose.orientation.z=rot[2]
        goal.pose.orientation.w=rot[3]
        goal.header.frame_id = "panda_link0"
        p = goal.pose.position
        o = goal.pose.orientation

        self._goal_pub.publish(goal)
        #o.x=-o.x
        #o.y = -o.y
        self._br.sendTransform((p.x,p.y,p.z),(o.x,o.y,o.z,o.w),rospy.Time.now(),"goal","panda_link0")
        ee_frame = 'sim_end_effector'
        if not self._sim:
            ee_frame = "end_effector"
        try:
            (trans,rot) = self._tl.lookupTransform("panda_link0", ee_frame, rospy.Time(0))
        except:
            print("no transform with "+ee_frame)
        pose = Pose()
        pose.position.x = goal.pose.position.x-trans[0]
        pose.position.y = goal.pose.position.y-trans[1]
        pose.position.z = goal.pose.position.z-trans[2]

        dx = math.fabs(pose.position.x)
        dy = math.fabs(pose.position.y)
        dz = math.fabs(pose.position.z)
        d = np.sqrt(dx**2+dy**2+dz**2)

        #From https://answers.ros.org/question/10124/relative-rotation-between-two-quaternions/

        qp = PyKDL.Rotation.Quaternion(rot[0],rot[1],rot[2],rot[3])
        current_angle = qp.GetRPY()

        rot = goal.pose.orientation
        qg = PyKDL.Rotation.Quaternion(rot.x,rot.y,rot.z,rot.w)
        q = qg*qp.Inverse()

        difference_angle = q.GetRPY()
        angle  = list(difference_angle)
        
        d = current_angle[2] + difference_angle[2]
        if d > np.pi:
            angle[2] -= 2 * np.pi
        if d < -np.pi:
            angle[2] += 2 * np.pi 

        max_lin = .12
        max_rot = .6

        d = np.sqrt(dx**2+dy**2+dz**2)
        t_lin = d / max_lin
        t_rot =  max([np.fabs(angle[0])/max_rot,np.fabs(angle[1])/max_rot])

        d_t = max(t_lin,t_rot)
        vel = Twist()
        
        threshold = .005
        dx = math.fabs(pose.position.x)
        dy = math.fabs(pose.position.y)
        dz = math.fabs(pose.position.z)

        if dx < threshold and dy < threshold and dz <threshold and math.fabs(angle[0])<.1 and math.fabs(angle[1])<.1 and math.fabs(angle[2])<.1:
            pass
        else:
            vel.linear.x = pose.position.x/d_t
            vel.linear.y = pose.position.y/d_t
            vel.linear.z = pose.position.z/d_t
            vel.angular.x = angle[0]/d_t
            vel.angular.y = angle[1]/d_t
            vel.angular.z = angle[2]/d_t
        
        self._panda_vel_pub.publish(vel)
        
    def signal_handler(self, signal, frame):
        sys.exit(0)

if __name__ == "__main__":
    rospy.init_node("mover")
    mover = Mover()
    signal.signal(signal.SIGINT, mover.signal_handler)
    mover.run()
